// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package feature

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FeatureClient is the client API for Feature service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeatureClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetReply, error)
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelReply, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error)
	Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainReply, error)
	Dropall(ctx context.Context, in *DropallRequest, opts ...grpc.CallOption) (*DropallReply, error)
}

type featureClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureClient(cc grpc.ClientConnInterface) FeatureClient {
	return &featureClient{cc}
}

func (c *featureClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/feature.Feature/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetReply, error) {
	out := new(SetReply)
	err := c.cc.Invoke(ctx, "/feature.Feature/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelReply, error) {
	out := new(DelReply)
	err := c.cc.Invoke(ctx, "/feature.Feature/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchReply, error) {
	out := new(SearchReply)
	err := c.cc.Invoke(ctx, "/feature.Feature/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainReply, error) {
	out := new(TrainReply)
	err := c.cc.Invoke(ctx, "/feature.Feature/Train", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featureClient) Dropall(ctx context.Context, in *DropallRequest, opts ...grpc.CallOption) (*DropallReply, error) {
	out := new(DropallReply)
	err := c.cc.Invoke(ctx, "/feature.Feature/Dropall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureServer is the server API for Feature service.
// All implementations must embed UnimplementedFeatureServer
// for forward compatibility
type FeatureServer interface {
	Status(context.Context, *StatusRequest) (*StatusReply, error)
	Set(context.Context, *SetRequest) (*SetReply, error)
	Del(context.Context, *DelRequest) (*DelReply, error)
	Search(context.Context, *SearchRequest) (*SearchReply, error)
	Train(context.Context, *TrainRequest) (*TrainReply, error)
	Dropall(context.Context, *DropallRequest) (*DropallReply, error)
	mustEmbedUnimplementedFeatureServer()
}

// UnimplementedFeatureServer must be embedded to have forward compatible implementations.
type UnimplementedFeatureServer struct {
}

func (UnimplementedFeatureServer) Status(context.Context, *StatusRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedFeatureServer) Set(context.Context, *SetRequest) (*SetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedFeatureServer) Del(context.Context, *DelRequest) (*DelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedFeatureServer) Search(context.Context, *SearchRequest) (*SearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFeatureServer) Train(context.Context, *TrainRequest) (*TrainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedFeatureServer) Dropall(context.Context, *DropallRequest) (*DropallReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dropall not implemented")
}
func (UnimplementedFeatureServer) mustEmbedUnimplementedFeatureServer() {}

// UnsafeFeatureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureServer will
// result in compilation errors.
type UnsafeFeatureServer interface {
	mustEmbedUnimplementedFeatureServer()
}

func RegisterFeatureServer(s grpc.ServiceRegistrar, srv FeatureServer) {
	s.RegisterService(&Feature_ServiceDesc, srv)
}

func _Feature_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feature.Feature/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feature.Feature/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feature.Feature/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feature.Feature/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feature.Feature/Train",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).Train(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Feature_Dropall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureServer).Dropall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feature.Feature/Dropall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureServer).Dropall(ctx, req.(*DropallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Feature_ServiceDesc is the grpc.ServiceDesc for Feature service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Feature_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feature.Feature",
	HandlerType: (*FeatureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Feature_Status_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Feature_Set_Handler,
		},
		{
			MethodName: "Del",
			Handler:    _Feature_Del_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Feature_Search_Handler,
		},
		{
			MethodName: "Train",
			Handler:    _Feature_Train_Handler,
		},
		{
			MethodName: "Dropall",
			Handler:    _Feature_Dropall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feature.proto",
}
